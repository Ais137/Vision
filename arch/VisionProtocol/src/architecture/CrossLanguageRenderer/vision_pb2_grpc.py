# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vision_pb2 as vision__pb2


class VisionRendererAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.refresh = channel.unary_unary(
                '/vision.VisionRendererAPI/refresh',
                request_serializer=vision__pb2.Background.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )
        self.line = channel.unary_unary(
                '/vision.VisionRendererAPI/line',
                request_serializer=vision__pb2.Line.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )
        self.circle = channel.unary_unary(
                '/vision.VisionRendererAPI/circle',
                request_serializer=vision__pb2.Circle.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )
        self.rect = channel.unary_unary(
                '/vision.VisionRendererAPI/rect',
                request_serializer=vision__pb2.Rect.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )
        self.polyline = channel.stream_unary(
                '/vision.VisionRendererAPI/polyline',
                request_serializer=vision__pb2.Line.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )
        self.polygon = channel.unary_unary(
                '/vision.VisionRendererAPI/polygon',
                request_serializer=vision__pb2.Polygon.SerializeToString,
                response_deserializer=vision__pb2.Response.FromString,
                )


class VisionRendererAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def refresh(self, request, context):
        """基础API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def line(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def circle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rect(self, request, context):
        """复合API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def polyline(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def polygon(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisionRendererAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.refresh,
                    request_deserializer=vision__pb2.Background.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
            'line': grpc.unary_unary_rpc_method_handler(
                    servicer.line,
                    request_deserializer=vision__pb2.Line.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
            'circle': grpc.unary_unary_rpc_method_handler(
                    servicer.circle,
                    request_deserializer=vision__pb2.Circle.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
            'rect': grpc.unary_unary_rpc_method_handler(
                    servicer.rect,
                    request_deserializer=vision__pb2.Rect.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
            'polyline': grpc.stream_unary_rpc_method_handler(
                    servicer.polyline,
                    request_deserializer=vision__pb2.Line.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
            'polygon': grpc.unary_unary_rpc_method_handler(
                    servicer.polygon,
                    request_deserializer=vision__pb2.Polygon.FromString,
                    response_serializer=vision__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.VisionRendererAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VisionRendererAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionRendererAPI/refresh',
            vision__pb2.Background.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def line(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionRendererAPI/line',
            vision__pb2.Line.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def circle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionRendererAPI/circle',
            vision__pb2.Circle.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionRendererAPI/rect',
            vision__pb2.Rect.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def polyline(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/vision.VisionRendererAPI/polyline',
            vision__pb2.Line.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def polygon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionRendererAPI/polygon',
            vision__pb2.Polygon.SerializeToString,
            vision__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
