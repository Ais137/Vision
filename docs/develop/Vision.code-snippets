{
    //源码文件元信息
    "Meta_Annotation": {
        "description": "描述源码文件元信息",
        "scope": "javascript,typescript",
        "prefix": "meta",
        "body": [
            "/**",
            " * @module",
            " * @desc     $1",
            " * @project  Vision",
            " * @author   Ais",
            " * @date     $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            " * @version  0.1.0",
            "*/"
        ]
    },
    //类构造器注解
    "Class_Annotation": {
        "description": "描述class的架构设计",
        "scope": "javascript,typescript",
        "prefix": "clsanno", 
        "body": [
            "/**",
            "* @classdesc $1",
            "*", 
            "* @property {}",
            "*", 
            "* @param {}",
            "*", 
            "* @example",
            "*/",
        ]
    },
    //方法注解
    "Method_Annotation": {
        "description": "描述method(方法)的功能",
        "scope": "javascript,typescript",
        "prefix": "anno",
        "body": [
            "/**",
            "* $1",
            "*", 
            "* @param {}",
            "* @returns {}",
            "*/"
        ]
    },


    //-------------------- 常用js代码片段 --------------------//
    //for循环
    "JavaScript_for_loop": {
        "description": "for循环",
        "scope": "javascript,typescript",
        "prefix": "for",
        "body": [
            "for(let i=0, n=$1.length; i<n; i++) {",
            "    $2",
            "}"
        ]
    },

    
    //-------------------- 粒子系统代码片段 --------------------//
    //构建粒子系统
    "Vision_ParticleSystem": {
        "description": "构建粒子系统(ParticleSystem)",
        "scope": "javascript,typescript",
        "prefix": "vis-pcs",
        "body": [
            "//构建粒子群",
            "let pcs = new vision.particle.ParticleSystem(() => {",
            "    return new vision.particle.ForceParticle(",
            "        Vector.random([[0, canvas.width], [0, canvas.height]]),",
            "        Vector.random([confs.vR, confs.vR])",
            "    );",
            "}).build(confs.N);",
        ]
    },
    //粒子系统action中间件
    "Vision_action_middlewares": {
        "description": "粒子系统action中间件",
        "scope": "javascript,typescript",
        "prefix": "vis-pcs-md",
        "body": [
            "pcs.action_middlewares.${1|before,after|}.push((function() {",
            "    $2",
            "    return function middleware(ps) {",
            "        for(let i=ps.length; i--; ) { }",
            "    }",
            "}()));",
        ]
    },
    //边界限制器
    "Vision_Border": {
        "description": "构建边界限制器(Border)",
        "scope": "javascript,typescript",
        "prefix": "vis-pcs-border",
        "body": [
            "//边界处理",
            "pcs.action_middlewares.after.push((function() {",
            "    //构建边界限制器",
            "    let border = new vision.border.${1|RectReflectBorder,LoopReflectBorder|}([[0, canvas.width], [0, canvas.height]]);",
            "    //边界处理中间件",
            "    return function border_middleware(ps) {",
            "        for(let i=ps.length; i--; ) { border.limit(ps[i]); }",
            "    }",
            "}()));",
        ]
    },


    //-------------------- 渲染器代码片段 --------------------//
    //构建间隔渲染器
    "Vision_IntervalRenderer": {
        "description": "构建间隔渲染器(IntervalRenderer)",
        "scope": "javascript,typescript",
        "prefix": "vis-renderer",
        "body": [
            "//渲染器",
            "const renderer = new vision.renderer.IntervalRenderer().render(() => {",
            "    canvas.refresh();",
            "    $1",
            "});",
        ]
    },
    //构建单帧渲染器
    "Vision_SingleFrameRenderer": {
        "description": "构建单帧渲染器(SingleFrameRenderer)",
        "prefix": "vis-renderer-sf",
        "body": [
            "//渲染器",
            "const renderer = new vision.renderer.SingleFrameRenderer().render(",
            "    (ft) => {",
            "        pcs.action();",
            "        $1",
            "    },",
            "    (ft) => {",
            "        canvas.refresh();",
            "    }",
            ");",
        ]
    },

    //构建截图器
    "Vision_Capturer": {
        "description": "构建截图器(Capturer)",
        "scope": "javascript,typescript",
        "prefix": "vis-capturer",
        "body": [
            "//截图器",
            "const capturer = new vision.views.Capturer(context).capturing();"
        ]
    }
}